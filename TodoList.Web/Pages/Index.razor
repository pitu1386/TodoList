@page "/"
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JSRuntime

<PageTitle>TodoList - Progreso de Tareas</PageTitle>

<div class="container">
    <h1>Lista de Tareas</h1>

    <div class="refresh-section">
        <button class="btn btn-primary" @onclick="RefreshData">🔄 Actualizar</button>
        @if (items == null || !items.Any())
        {
            <p>📋 No hay tareas disponibles.</p>
            <button class="btn btn-primary" @onclick="LoadSampleData">Cargar datos de prueba</button>
        }
    </div>

    @if (isLoading && items == null)
    {
        <div class="loading">
            <p><em>Cargando datos...</em></p>
        </div>
    }
    else
    {
        <div class="todo-grid">
            @foreach (var item in items)
            {
                <div class="todo-card">
                    <div class="todo-header">
                        <h3>@item.Title</h3>
                        <span class="category-badge @GetCategoryClass(item.Category)">@item.Category</span>
                    </div>
                    <p class="todo-description">@item.Description</p>

                    <div class="progress-section">
                        <div class="progress-info">
                            <span class="progress-text">Progreso: @item.TotalProgress.ToString("F1")%</span>
                            <span class="status-badge @(item.IsCompleted ? "completed" : "in-progress")">
                                @(item.IsCompleted ? "✅ Completado" : "🔄 En progreso")
                            </span>
                        </div>

                        <!-- Barra de progreso principal -->
                        <div class="progress-bar-container">
                            <div class="progress-bar-background">
                                <div class="progress-bar-fill" style="width: @(item.TotalProgress)%"></div>
                            </div>
                            <div class="progress-percentage">@item.TotalProgress.ToString("F1")%</div>
                        </div>
                    </div>

                    <!-- Detalle de progresiones -->
                    @if (item.Progressions != null && item.Progressions.Any())
                    {
                        <div class="progressions-detail">
                            <h4>Historial de Progreso:</h4>
                            @foreach (var prog in item.Progressions)
                            {
                                <div class="progression-item">
                                    <span class="progression-date">@prog.Date.ToString("dd/MM/yyyy")</span>
                                    <span class="progression-percent">+@prog.Percent.ToString("F1")%</span>
                                    <span class="progression-cumulative">(Total: @prog.CumulativePercent.ToString("F1")%)</span>
                                    <div class="mini-progress-bar">
                                        <div class="mini-progress-fill" style="width: @(prog.CumulativePercent)%"></div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    }



    @if (errorMessage != null)
    {
        <div class="error-message">
            <strong>Error:</strong> @errorMessage
            <button class="btn-close" @onclick="() => errorMessage = null">×</button>
        </div>
    }
</div>



@code {
    private List<TodoItemFormattedDto>? items;
    private bool isLoading = true;
    private Timer? refreshTimer;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();


        refreshTimer = new Timer(async _ => await InvokeAsync(async () => await RefreshData()),
                                null, TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(10));
    }

    private async Task RefreshData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var client = ClientFactory.CreateClient("TodoApi");
            items = await client.GetFromJsonAsync<List<TodoItemFormattedDto>>("todolist/items/formatted");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar datos: {ex.Message}");
            items = new List<TodoItemFormattedDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadSampleData()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var client = ClientFactory.CreateClient("TodoApi");
            var response = await client.PostAsync("todolist/seed", null);

            if (response.IsSuccessStatusCode)
            {
                await RefreshData();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al cargar datos de prueba: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar datos de prueba: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    private string GetCategoryClass(string category)
    {
        return $"category-{category.ToLower()}";
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}
@* @page "/"
@inject IHttpClientFactory ClientFactory
@implements IDisposable

<PageTitle>TodoList - Beyond Hospitality</PageTitle>

<div class="container">
    <h1 class="title">📝 Lista de Tareas</h1>

    <div class="refresh-section">
        <button class="btn btn-refresh" @onclick="RefreshData" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner">⟳</span>
            }
            Actualizar
        </button>
        <span class="last-update">Última actualización: @lastUpdate.ToString("HH:mm:ss")</span>
    </div>

    @if (isLoading && items == null)
    {
        <div class="loading">
            <div class="spinner-large">⟳</div>
            <p>Cargando datos...</p>
        </div>
    }
    else if (items == null || !items.Any())
    {
        <div class="empty-state">
            <p>📋 No hay tareas disponibles.</p>
            <button class="btn btn-primary" @onclick="LoadSampleData">Cargar datos de prueba</button>
        </div>
    }
    else
    {
        <div class="todo-list">
            @foreach (var item in items)
            {
                <div class="todo-card @(item.IsCompleted ? "completed" : "")">
                    <div class="todo-header">
                        <h3>@item.Title</h3>
                        <span class="category-badge @GetCategoryClass(item.Category)">@item.Category</span>
                        @if (item.IsCompleted)
                        {
                            <span class="completed-badge">✓ Completado</span>
                        }
                    </div>

                    <p class="description">@item.Description</p>

                    <div class="progress-section">
                        <div class="progress-info">
                            <span class="progress-text">Progreso: @item.TotalProgress%</span>
                            <span class="progress-status">@(item.IsCompleted ? "Completado" : "En progreso")</span>
                        </div>

                        <div class="progress-bar-container">
                            <div class="progress-bar" style="width: @($"{item.TotalProgress}%")"></div>
                        </div>
                    </div>

                    @if (item.Progressions != null && item.Progressions.Any())
                    {
                        <div class="progressions-detail">
                            <h4>Historial de Progreso:</h4>
                            @foreach (var progression in item.Progressions)
                            {
                                <div class="progression-item">
                                    <div class="progression-info">
                                        <span class="progression-date">@progression.Date.ToString("dd/MM/yyyy")</span>
                                        <span class="progression-percent">+@progression.Percent% → @progression.CumulativePercent%</span>
                                    </div>
                                    <div class="progression-bar-container">
                                        <div class="progression-bar" style="width: @($"{progression.CumulativePercent}%")"></div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    }

    @if (errorMessage != null)
    {
        <div class="error-message">
            <strong>Error:</strong> @errorMessage
            <button class="btn-close" @onclick="() => errorMessage = null">×</button>
        </div>
    }
</div>



@code {
    private List<TodoItemFormattedDto>? items;
    private bool isLoading = false;
    private string? errorMessage;
    private DateTime lastUpdate = DateTime.Now;
    private Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();

        // Auto-refresh cada 10 segundos
        refreshTimer = new Timer(async _ => await InvokeAsync(async () => await RefreshData()),
                                null, TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(10));
    }

    private async Task RefreshData()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var client = ClientFactory.CreateClient("TodoApi");
            items = await client.GetFromJsonAsync<List<TodoItemFormattedDto>>("todolist/items/formatted");
            lastUpdate = DateTime.Now;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los datos: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadSampleData()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var client = ClientFactory.CreateClient("TodoApi");
            var response = await client.PostAsync("todolist/seed", null);

            if (response.IsSuccessStatusCode)
            {
                await RefreshData();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error al cargar datos de prueba: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar datos de prueba: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetCategoryClass(string category)
    {
        return $"category-{category.ToLower()}";
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }


}


  *@